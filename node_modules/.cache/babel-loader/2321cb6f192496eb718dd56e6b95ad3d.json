{"ast":null,"code":"// Creational design patterns:\n// Provide a mechanism to create an object and without revealing the creation method.\n// - Factory\n// Provides a template to create an object. Can be used when the type of object to create can be\n// different and needs to be specified in every instatiation. Does not require the keyword 'new' to instatiate.\nclass iceCreamFactory {\n  constructor() {\n    this.iceCreamFactory = function (flavour) {\n      let iceCream;\n\n      if (flavor === \"chocolate\") {\n        iceCream = new Chocolate();\n      }\n    };\n  }\n\n} // - Constructor\n// - Builder\n// - Abstract\n// - Prototype\n// - Singleton\n// Structural design patterns:\n// Patterns that concern the class/object composition. They let you add new functionalities to object so in case the\n// system changes it might be easy to add things to the core without affecting the rest\n// - Facade\n// - Decorator\n// - Proxy\n// - Flyweight\n// - Bridge\n// - Composite\n// - Adapter\n// Behavioral design patterns\n// They are used when we need dissimilar objects to communicate. They streamline the communication between objects\n// so they are always in sync.\n// - Revealing module\n// - Chain of responsabilty\n// - Strategy\n// - Interpreter\n// - Command\n// - Observer\n// - Iterator\n// - Mediator\n// - Visitor\n// - State\n// - Memento\n// Architectural design patterns\n// - MVC\n// - MVP\n// - MVVC","map":{"version":3,"sources":["C:/Users/Michael/Documents/reactJS/react-full-stack-test/src/components/lauch-card/index.js"],"names":["iceCreamFactory","constructor","flavour","iceCream","flavor","Chocolate"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA,MAAMA,eAAN,CAAsB;AACpBC,EAAAA,WAAW,GAAG;AACZ,SAAKD,eAAL,GAAuB,UAAUE,OAAV,EAAmB;AACxC,UAAIC,QAAJ;;AAEA,UAAIC,MAAM,KAAK,WAAf,EAA4B;AAC1BD,QAAAA,QAAQ,GAAG,IAAIE,SAAJ,EAAX;AACD;AACF,KAND;AAOD;;AATmB,C,CAYtB;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA","sourcesContent":["// Creational design patterns:\n// Provide a mechanism to create an object and without revealing the creation method.\n\n// - Factory\n// Provides a template to create an object. Can be used when the type of object to create can be\n// different and needs to be specified in every instatiation. Does not require the keyword 'new' to instatiate.\n\nclass iceCreamFactory {\n  constructor() {\n    this.iceCreamFactory = function (flavour) {\n      let iceCream;\n\n      if (flavor === \"chocolate\") {\n        iceCream = new Chocolate();\n      }\n    };\n  }\n}\n\n// - Constructor\n// - Builder\n// - Abstract\n// - Prototype\n// - Singleton\n\n// Structural design patterns:\n\n// Patterns that concern the class/object composition. They let you add new functionalities to object so in case the\n// system changes it might be easy to add things to the core without affecting the rest\n\n// - Facade\n// - Decorator\n// - Proxy\n// - Flyweight\n// - Bridge\n// - Composite\n// - Adapter\n\n// Behavioral design patterns\n\n// They are used when we need dissimilar objects to communicate. They streamline the communication between objects\n// so they are always in sync.\n\n// - Revealing module\n// - Chain of responsabilty\n// - Strategy\n// - Interpreter\n// - Command\n// - Observer\n// - Iterator\n// - Mediator\n// - Visitor\n// - State\n// - Memento\n\n// Architectural design patterns\n\n// - MVC\n// - MVP\n// - MVVC\n"]},"metadata":{},"sourceType":"module"}